/* Лускина Юлия

У нас есть список электронных адресов, в котором нужно найти все адреса с корректным доменом. 
Корректный домен в нашей задаче — домен, имеющий несколько частей, разделенных точкой. 
Возникает проблема: мы не знаем, сколько раз может повторяться часть с точкой. 

Рассмотрим наше регулярное выражение. Сначала у нас идет набор. Точка в нем не экранирована, 
так как находится внутри набора. У набора стоит квантификатор «1 и более раз», потом идет «@».

Мы открываем круглые скобки — так обозначается группа в регулярных выражениях. 
Внутри группы — набор из символьного класса, точки и дефиса. Он повторяется 1 и 
более раз — знак «+». Далее идет точка — уже экранированная, потому что находится 
вне набора. Вся эта группа может повторяться 1 и более раз — знак «+» после круглых скобок. 
После точки у нас обязательно должны идти символы, ведь домен не может заканчиваться точкой. 
Поэтому в конце выражения мы пишем «\w+». 


Примеры корректных электронных адресов
example@mail.com
user@domain.co.uk
first.last@sub.domain.com
name123@domain.org
test_email@domain.info
Примеры некорректных электронных адресов
invalid@domain (нет домена верхнего уровня)
another.invalid@domain..com (двойная точка перед доменом)
@missingusername.com (нет имени пользователя)
username@.com (нет домена перед точкой)
user@domain.c (домен верхнего уровня слишком короткий)




^:
Указывает на начало строки. Это значит, что проверка начнется с самого начала текста.

[^@]+:
[^@] — это отрицательный класс символов, который означает "любой символ, кроме @".
+ — квантификатор, который указывает, что предыдущий элемент ([^@]) должен встречаться 
один или более раз. Таким образом, эта часть выражения соответствует имени пользователя 
в адресе электронной почты и гарантирует, что оно не может быть пустым и не может содержать символ @.

@:
Это обычный символ "собака", который разделяет имя пользователя и домен в адресе электронной почты.

([\\w.-]+\\.[\\w]+)+:
( и ) — скобки используются для группировки выражений.
\\w — это сокращение для "word character", что соответствует любому буквенному символу (a-z, A-Z), 
цифре (0-9) или символу подчеркивания (_).
.- — добавляет к символам слова также точку (.) и дефис (-), что позволяет использовать их в доменных именах.
+ — квантификатор, который указывает, что предыдущий элемент ([\\w.-]) должен встречаться один или 
более раз. Это соответствует части доменного имени перед точкой.
\\. — экранированная точка, которая соответствует настоящей точке в адресе электронной почты (например, в mail.com).
[\\w]+ — это соответствует домену верхнего уровня (например, com, org, net), который должен 
содержать один или более буквенно-цифровых символов или символов подчеркивания.
+ (после группы):
Этот квантификатор указывает, что вся группа ([\\w.-]+\\.[\\w]+) может повторяться один или более раз. 
Это означает, что адрес электронной почты может содержать поддомены, например user@sub.domain.com.
$:
Указывает на конец строки. Это гарантирует, что больше никаких символов не будет после 
соответствующей части адреса электронной почты.


Регулярное выражение ^[^@]+@([\\w.-]+\\.[\\w]+)+$ соответствует корректному адресу электронной почты, который:

Начинается с имени пользователя (без @).
Содержит символ @.
Содержит домен, который может включать поддомены и должен заканчиваться на точку, за которой следует домен верхнего уровня.

*/
import java.util.Scanner;
import java.util.regex.*;

public class Main {
    public static void main(String[] args) {
        // Создаем объект Scanner для считывания пользовательского ввода
        Scanner scanner = new Scanner(System.in);
        String emailRegex = "^[^@]+@([\\w.-]+\\.[\\w]+)+$";
        Pattern pattern = Pattern.compile(emailRegex);

        System.out.println("Введите электронные адреса (вводите 'exit' для выхода):");

        while (true) {
            String email = scanner.nextLine();

            // Проверка на выход из программы
            if (email.equalsIgnoreCase("exit")) {
                break;
            }

            Matcher matcher = pattern.matcher(email);
            if (matcher.matches()) {
                System.out.println(email + " - корректный адрес");
            } else {
                System.out.println(email + " - некорректный адрес");
            }
        }

        // Закрываем Scanner
        scanner.close();
        System.out.println("Программа завершена.");
    }
}